<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.article">
    <select id="rootArticleList" parameterType="com.spring.study.model.article.ArticleParam" resultType="com.spring.study.model.article.Article">
        SELECT 
                     ARTICLE_ID
                   , PARENT_ID
                   , TITLE
                   , CONTENT
                   , WRITE_MEMBER_ID
                   , WRITE_DATE
		FROM         ARTICLE_TB 
		START WITH   ARTICLE_ID IN 
					              ( <!-- 10024->10008, 10030->10018, 10031->10018, 100032->100018, 10033->10032->10018, 10030->10018 -->
					                SELECT regexp_substr(#{articleId}, '[^,]+', 1, LEVEL) AS ARTICLE_ID
					                FROM DUAL
					                CONNECT BY LEVEL &lt;= length(regexp_replace(#{articleId}, '[^,]+', '')) + 1
					              )            
		CONNECT BY  ARTICLE_ID =  PRIOR PARENT_ID
    </select>
    
	<select id="listArticle2" parameterType="com.spring.study.model.article.ArticleParam" resultType="com.spring.study.model.article.Article">
	SELECT  Z.*  
	FROM (      
	        SELECT  X.*
	        FROM    (
	                    SELECT  
	                    ROWNUM AS RNUM
	                            , A.*
	                    FROM    ( 
	                               SELECT   /*+ ORDERED USE_NL(N T) INDEX_DESC(N NOTICE_TB_PK) INDEX_DESC(T ARTICLE_PK) */
	                                      T.ARTICLE_ID
	                                     , T.PARENT_ID
	                                     , T.TITLE
	                                     , T.CONTENT
	                                     , T.WRITE_MEMBER_ID
	                                     , T.WRITE_DATE
	                                FROM    NOTICE_TB N
	                                        ,ARTICLE_TB T
	                                WHERE  1                   = 1
	                                AND     T.ARTICLE_ID        = N.ARTICLE_ID
	                                AND     SYSDATE           BETWEEN N.DISPLAY_START_DATE   AND N.DISPLAY_END_DATE
	                                UNION ALL
	                                SELECT  Y.*
	                                FROM    (
	                                        SELECT  
	                                                /*+ INDEX_DESC(C ARTICLE_ID)*/
	                                                C.ARTICLE_ID
	                                               , C.PARENT_ID
	                                               , C.TITLE
	                                               , C.CONTENT
	                                               , C.WRITE_MEMBER_ID
	                                               , C.WRITE_DATE
	                                FROM   ARTICLE_TB C
	                                WHERE 1                 = 1
	                                AND     NOT EXISTS (
	                                                      SELECT 
	                                                              'X'
	                                                      FROM    NOTICE_TB
	                                                      WHERE   ARTICLE_ID = C.ARTICLE_ID
	                                                   )
	                                AND     (#{userId, jdbcType=VARCHAR} IS NULL OR C.WRITE_MEMBER_ID = #{userId, jdbcType=VARCHAR}) 
	                                START WITH
	                                        PARENT_ID           = 0 
	                                CONNECT BY
	                                        PRIOR ARTICLE_ID    = C.PARENT_ID 
	                                ORDER SIBLINGS BY
	                                       <choose>
		                                       <when test="sort == 'old'">
			                                       C.ARTICLE_ID DESC
		                                       </when>
		                                       <when test="sort == 'new'">
			                                       C.ARTICLE_ID 
		                                       </when>
		                                       <when test="sort == 'title'">
			                                       C.TITLE
		                                       </when>
		                                       <when test="sort == 'commentCnt'">
			                                       (
				                                       SELECT ARTICLE_ID, COUNT(1)
				                                       FROM   COMMENT_TB
				                                       GROUP BY ARTICLE_ID
			                                       ) DESC
		                                       </when>
		                                       <when test="sort == 'viewCnt'">
			                                       (
				                                       SELECT ARTICLE_ID, COUNT(1)
				                                       FROM ARTICLE_COUNT_TB
                                                       GROUP BY ARTICLE_ID
			                                       ) DESC
		                                       </when>
	                                       </choose>
						                   ) Y
	                            ) A
	               ) X
		 <![CDATA[
	           WHERE   X.RNUM         <= #{endNum}
		 ) Z
		 WHERE  Z.RNUM      >= #{startNum}
	     ]]>
 	 
	</select>
	
    <select id="listNoticeArticle2" resultType="com.spring.study.model.article.Article">
    <![CDATA[
        SELECT  X.*
        FROM    (
                    SELECT  
                            A.*   
                    FROM    (
                                SELECT  /*+ ORDERED USE_NL(N A) INDEX_DESC(N NOTICE_TB_PK) INDEX_DESC(A ARTICLE_PK) */
                                        ROW_NUMBER() OVER(PARTITION BY A.ARTICLE_ID ORDER BY A.ARTICLE_ID DESC) AS RNUM
                                      , A.ARTICLE_ID
                                      , A.PARENT_ID
                                      , A.TITLE
                                      , A.CONTENT
                                      , A.WRITE_MEMBER_ID
                                FROM    NOTICE_TB      N <!--  모수 자체가 ARTICLE 보다 현저하게 적음 -->
                                      , ARTICLE_TB         A
                                WHERE   1                   = 1
                                AND     A.ARTICLE_ID        = NA.ARTICLE_ID
                                AND     SYSDATE             BETWEEN N.DISPLAY_START_DATE   AND N.DISPLAY_END_DATE -- 추가로 NOTICE_TB 자체적인 필터 걸어서 모수를 더 줄일 수도 있음
                                ORDER BY
                                        A.ARTICLE_ID DESC
                            ) A
                    WHERE   A.RNUM     <= #{endNum:INTEGER}
                ) X
         WHERE  X.RNUM      >= #{startNum:INTEGER}
     ]]>
    </select>
	
	<select id="listArticle" resultType="com.spring.study.model.article.Article">
            SELECT	ROWNUM as rNum
                    ,LEVEL AS LVL
                    , ARTICLE_ID
                    , PARENT_ID
                    , TITLE
                    , CONTENT
                    , WRITE_MEMBER_ID
                    <!-- , WRITE_DATE -->
            FROM    ARTICLE_TB
			WHERE   ARTICLE_ID > 0
            START WITH
                    PARENT_ID           = 0 
            CONNECT BY
                    PRIOR ARTICLE_ID    = PARENT_ID 
            ORDER SIBLINGS BY
                    ARTICLE_ID DESC
       		
	</select>
	
	<select id="viewArticle" parameterType="String" resultType="com.spring.study.model.article.Article">
		SELECT   ARTICLE_ID
				,TITLE
				,CONTENT
				,WRITE_MEMBER_ID
				,WRITE_DATE
		FROM 	ARTICLE_TB
		WHERE 	ARTICLE_ID = #{articleId}
	</select>
	
	<insert id="addArticleReadCount" parameterType="String">
	   INSERT INTO ARTICLE_TB
	   (
	       ARTICLE_ID
	   )
	   VALUES
	   (
	       #{articleId}
	   )
	</insert>
	
	<select id="getWriterId" parameterType="String" resultType="com.spring.study.model.article.Article">
        SELECT  
                WRITE_MEMBER_ID
        FROM    
                ARTICLE_TB 
        WHERE   ARTICLE_ID = #{articleId}
    </select>
	
	<insert id="insertArticle" parameterType="articleVo">
		INSERT INTO ARTICLE_TB
		(
			ARTICLE_ID
			,PARENT_ID
			,TITLE
			,CONTENT
			,WRITE_MEMBER_ID
			,WRITE_DATE
		)
		VALUES
		(
			#{articleId}
			,0
			,#{title}
			,#{content}
			,#{writeMemberId}
			,sysdate
		)
	</insert>
	
	<update id="updateArticle" parameterType="articleVo">
		UPDATE ARTICLE_TB
		SET
				TITLE			  = #{title}
				,CONTENT		  = #{content}
				,MODIFY_MEMBER_ID = #{modifyMemberId}
				,MODIFY_DATE 	  = sysdate
			
		WHERE
				ARTICLE_ID	      = #{articleId}
		AND		WRITE_MEMBER_ID   = #{writeMemberId}
	</update>
	
	<select id="totalArticle" resultType="int">
		SELECT
				COUNT(1)
		FROM	ARTICLE_TB
				
	</select>
	
	<select id="getSequence" resultType="int">
		SELECT 
				MAX(ARTICLE_ID)
		FROM 	ARTICLE_TB
	</select>
	
	<delete id="deleteArticle" parameterType="String">
		DELETE 	
		FROM	ARTICLE_TB
		WHERE	ARTICLE_ID = #{articleId}
		AND		WRITE_MEMBER_ID = #{writeMemberId}
	
	</delete>
	
	<insert id="insertReply" parameterType="articleVo">
		<!-- <selectKey keyProperty="articleId" resultType="int" order="BEFORE">
			SELECT
					NO_SEQ.NEXTVAL
			FROM	DUAL
		</selectKey> -->
			INSERT INTO ARTICLE
			(
				ARTICLE_ID
				,PARENT_ID
				,TITLE
				,CONTENT
				,WRITE_MEMBER_ID
				,WRITE_DATE
			)
			VALUES
			(
				#{articleId}
				,#{parentId}
				,#{title}
				,#{content}
				,#{writeMemberId}
				,sysdate
			)
	</insert>
	
	<select id="isarticleId" parameterType="String" resultType="String">
		SELECT	 NVL(MIN('Y'), 'N')
		FROM 	DUAL
		WHERE	1			= 1
		AND		EXISTS
				(
					SELECT 
							1
					FROM	ARTICLE_TB
					WHERE	
							ARTICLE_ID = #{articleId}
				)
	</select>
	<!-- 아이디 체크 AOP를 위한 쿼리-->	
	<select id="equalsWriterId" parameterType="String" resultType="String">
		SELECT	 NVL(MIN('Y'), 'N')
		FROM 	DUAL
		WHERE	1			= 1
		AND		EXISTS
				(
					SELECT 
							1
					FROM	ARTICLE_TB
					WHERE	
							ARTICLE_ID = #{articleId}
					AND		WRITE_MEMBER_ID = #{writeMemberId} 
				)
	</select>
	
	<select id="articleId" resultType="String">
		SELECT
					NO_SEQ.NEXTVAL
			FROM	DUAL
	</select>
	
	<select id="noticeList" resultType="articleVo">
		SELECT  /*+ ordered use_nl(t2)*/
				T2.*
		FROM 	NOTICE_TB T1, ARTICLE_TB T2
		WHERE	
				T1.ARTICLE_ID = T2.ARTICLE_ID
	</select>
	
	<insert id="registerNotice" parameterType="articleVo" >
		<selectKey keyProperty="noticeId" resultType="String" order="BEFORE">
			SELECT NOTICE_ID_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO NOTICE_TB
		(
			NOTICE_ID
			,ARTICLE_ID
			,DISPLAY_START_DATE
			,DISPLAY_END_DATE
		)
		VALUES
		(
			#{noticeId}
			,#{articleId}
			,#{displayStartDate}
			,#{displayEndDate}
		)
	</insert>
	
	<select id="getMyArticleList" parameterType="String" resultType="articleVo">
		SELECT /*+ INDEX(MEMBER_ID_IDX)*/
				* 
		FROM ARTICLE_TB
		WHERE WRITE_MEMBER_ID = #{writeMemberId}
	</select>	
	
	<select id="isNoticeId" parameterType="String" resultType="String">
		SELECT  NVL(MIN('Y'), 'N')
		FROM 	DUAL
		WHERE	1			= 1
				(
						SELECT 
									1
						FROM		NOTICE_TB
						WHERE	
									ARTICLE_ID = #{articleId}
				)
	</select>
    
    <!-- 배치  -->
    <select id="getAllArticleIds" resultType="com.spring.study.model.article.ArticleRankVo">
        SELECT ARTICLE_ID
        FROM ARTICLE_TB
       
    </select>
    
    <!-- <resultMap id="commentCntResultMap" type="java.util.HashMap">
        <result property="articleId" column="ARTICLE_ID"/>
        <result property="count" column="COUNT" javaType="int"/>
    </resultMap>
     -->
    <select id="getCommentsCntList" resultType="com.spring.study.model.comments.Comment">
        SELECT ARTICLE_ID, COUNT(1) AS COMMENTS_CNT
		FROM COMMENT_TB
		GROUP BY ARTICLE_ID
    </select>
    
    <select id="getReadCntList" resultType="com.spring.study.model.article.ArticleReadCountVo">
        SELECT ARTICLE_ID, COUNT(1) AS READ_COUNT
		FROM ARTICLE_COUNT_TB
		GROUP BY ARTICLE_ID 
    </select>
	
	<delete id="deleteArticleRank">
	   DELETE  
       FROM    ARTICLE_RANK_COUNT
	</delete>
	
	<insert id="insertArticleRank" parameterType="com.spring.study.model.article.ArticleRankVo">
	    INSERT INTO ARTICLE_RANK_COUNT
	    (
	                 ARTICLE_ID
				   , COMMENT_CNT
				   , READ_CNT
				   , RECOMMEND
	    )
	    VALUES
	    <foreach item="article" index="index" collection="list" open="" separator="," close="">
	    (
	                 #{article.articleId}
                   , #{article.commentCnt}
                   , #{article.readCnt}
                   , #{article.recommend}
	    )
	    </foreach>
	</insert>
</mapper>
