<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.article">

<!-- <resultMap type="com.spring.study.common.model.ArticleVo" id="articleResult">
	<result property="articleNo" column="articleNo"/>
	<result property="parentNo" column="PARENT_ID"/>
	<result property="title" column="TITLE"/>
	<result property="content" column="CONTENT"/>
	<result property="writeDate" column="WRITE_DATE"/>
	<result property="writeMemberId" column="WRITE_MEMBER_ID"/> 
	<collection property="commentsList" column="ARTICLE_NO" javaType="java.util.ArrayList" ofType="articleReplyVo" select="getCommentListByarticleNo"/>
</resultMap> -->
<!-- 	
 	<select id="getCommentListByarticleNo" resultType="articleReplyVo">
		SELECT
  	    		  A.*
			FROM    (
  	          SELECT	ROWNUM as rNum
    	                ,LEVEL AS LVL
        	            , ARTICLE_NO
            	        , REPLY_NO
                	    , PARENT_NO
                    	, CONTENT
	                    , WRITE_MEMBER_ID
    	               
        	    FROM    ARTICLE_REPLY
            	START WITH
                	    PARENT_NO           = 0 
            	CONNECT BY
            	        PRIOR ARTICLE_NO    = PARENT_NO 
	            ORDER SIBLINGS BY
    	                ARTICLE_NO DESC
       			 ) A
       			 WHERE ARTICLE_NO in (
	       			 SELECT regexp_substr(#{articleNo}, '[^,]+', 1, LEVEL)
					FROM DUAL
					CONNECT BY LEVEL &lt;= length(regexp_replace(#{article_no}, '[^,]+', '')) + 1
       			 )
	</select>
 -->	
	
	<!-- <select id="listArticle2" resultMap="articleResult"> -->
	<select id="listArticle2" resultType="articleVo">
	
		SELECT  X.*
		FROM    (
					SELECT  
					        A.*   
					FROM    ( 
			                   SELECT  /*+ INDEX_DESC(A ARTICLE_PK)*/
                                       ROW_NUMBER() OVER(ORDER BY A.ARTICLE_ID DESC) AS RNUM
                                       /*ROW_NUMBER() OVER(ORDER BY ) AS RNUM
                                       ROW_NUMBER() OVER(ORDER BY ) AS RNUM
                                       ROW_NUMBER() OVER(ORDER BY ) AS RNUM
                                       ROW_NUMBER() OVER(ORDER BY ) AS RNUM*/
                                      , A.ARTICLE_ID
                                      , A.PARENT_ID
                                      , A.TITLE
                                      , A.CONTENT
                                      , A.WRITE_MEMBER_ID
                                FROM    ARTICLE A
                                WHERE   1                   = 1
                                <if test="writeMemberId != null">
                                AND     A.WRITE_MEMBER_ID = #{writeMemberId}
                               </if>
					        ) A
		<![CDATA[
					WHERE   A.RNUM         <= #{endNum}
		        ) X
		 WHERE  X.RNUM      >= #{startNum}
		 ]]>
 	 
	</select>
	
    <select id="listNoticeArticle2" resultType="articleVo">
    <![CDATA[
        SELECT  X.*
        FROM    (
                    SELECT  
                            A.*   
                    FROM    (
                                SELECT  /*+ ORDERED USE_NL(NA A) INDEX_DESC(NA NOTICE_ARTICLE_PK) INDEX_DESC(A ARTICLE_PK) */
                                        ROW_NUMBER() OVER(PARTITION BY A.ARTICLE_ID ORDER BY A.ARTICLE_ID DESC) AS RNUM
                                      , A.ARTICLE_ID
                                      , A.PARENT_ID
                                      , A.TITLE
                                      , A.CONTENT
                                      , A.WRITE_MEMBER_ID
                                FROM    NOTICE_ARTICLE  NA <!--  모수 자체가 ARTICLE 보다 현저하게 적음 -->
                                      , ARTICLE         A
                                WHERE   1                   = 1
                                AND     A.ARTICLE_ID        = NA.ARTICLE_ID
                                AND     SYSDATE             BETWEEN NA.DISPLAY_START_DATE   AND NA.DISPLAY_END_DATE -- 추가로 NOTICE_ARTICLE 자체적인 필터 걸어서 모수를 더 줄일 수도 있음
                                ORDER BY
                                        A.ARTICLE_ID DESC
                            ) A
                    WHERE   A.RNUM     <= #{endNum:INTEGER}
                ) X
         WHERE  X.RNUM      >= #{startNum:INTEGER}
     ]]>
    </select>
	
	<select id="listArticle" resultType="articleVo">
            SELECT	ROWNUM as rNum
                    ,LEVEL AS LVL
                    , ARTICLE_ID
                    , PARENT_ID
                    , TITLE
                    , CONTENT
                    , WRITE_MEMBER_ID
                    <!-- , WRITE_DATE -->
            FROM    ARTICLE
			WHERE   ARTICLE_ID > 0
            START WITH
                    PARENT_ID           = 0 
            CONNECT BY
                    PRIOR ARTICLE_ID    = PARENT_ID 
            ORDER SIBLINGS BY
                    ARTICLE_ID DESC
       		
	</select>
	
	<select id="viewArticle" parameterType="String" resultType="articleVo">
		SELECT 
				* 
		FROM 	ARTICLE 
		WHERE 	ARTICLE_ID = #{articleId}
	</select>
	
	<insert id="insertArticle" parameterType="articleVo">
		INSERT INTO ARTICLE
		(
			ARTICLE_ID
			,PARENT_ID
			,TITLE
			,CONTENT
			,WRITE_MEMBER_ID
			,WRITE_DATE
		)
		VALUES
		(
			#{articleId}
			,0
			,#{title}
			,#{content}
			,#{writeMemberId}
			,#{writeDate}
		)
	</insert>
	
	<update id="updateArticle" parameterType="articleVo">
		UPDATE ARTICLE
		SET
				TITLE			  = #{title}
				,CONTENT		  = #{content}
				,MODIFY_MEMBER_ID = #{modifyMemberId}
				,MODIFY_DATE 	  = #{modifyDate}
			
		WHERE
				ARTICLE_ID	      = #{articleId}
		AND		WRITE_MEMBER_ID   = #{writeMemberId}
	</update>
	
	<select id="totalArticle" resultType="int">
		SELECT
				COUNT(1)
		FROM	ARTICLE
				
	</select>
	
	<select id="getSequence" resultType="int">
		SELECT 
				MAX(ARTICLE_ID)
		FROM 	ARTICLE
	</select>
	
	<delete id="deleteArticle" parameterType="String">
		DELETE 	
		FROM	ARTICLE
		WHERE	ARTICLE_ID = #{articleId}
		AND		WRITE_MEMBER_ID = #{writeMemberId}
	
	</delete>
	
	<insert id="insertReply" parameterType="articleVo">
		<!-- <selectKey keyProperty="articleId" resultType="int" order="BEFORE">
			SELECT
					NO_SEQ.NEXTVAL
			FROM	DUAL
		</selectKey> -->
			INSERT INTO ARTICLE
			(
				ARTICLE_ID
				,PARENT_ID
				,TITLE
				,CONTENT
				,WRITE_MEMBER_ID
			)
			VALUES
			(
				#{articleId}
				,#{parentId}
				,#{title}
				,#{content}
				,#{writeMemberId}
			)
	</insert>
	
	<select id="isarticleId" parameterType="String" resultType="String">
		SELECT	 NVL(MIN('Y'), 'N')
		FROM 	DUAL
		WHERE	1			= 1
		AND		EXISTS
				(
					SELECT 
							1
					FROM	ARTICLE
					WHERE	
							ARTICLE_ID = #{articleId}
				)
	</select>
	<!-- 아이디 체크 AOP를 위한 쿼리-->	
	<select id="equalsWriterId" parameterType="articleVo" resultType="String">
		SELECT	 NVL(MIN('Y'), 'N')
		FROM 	DUAL
		WHERE	1			= 1
		AND		EXISTS
				(
					SELECT 
							1
					FROM	ARTICLE
					WHERE	
							ARTICLE_ID = #{articleId}
					AND		WRITE_MEMBER_ID = #{writeMemberId} 
				)
	</select>
	
	<select id="articleId" resultType="String">
		SELECT
					NO_SEQ.NEXTVAL
			FROM	DUAL
	</select>
	
	<select id="noticeList" resultType="articleVo">
		SELECT  /*+ ordered use_nl(t2)*/
				T2.*
		FROM 	NOTICE_ARTICLE T1, ARTICLE T2
		WHERE	
				T1.ARTICLE_ID = T2.ARTICLE_ID
	</select>
	
	<insert id="registerNotice" parameterType="articleVo">
		<selectKey keyProperty="noticeId" resultType="String" order="BEFORE">
			SELECT NOTICE_ID_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO NOTICE_ARTICLE
		(
			NOTICE_ID
			,ARTICLE_ID
			,ENFORCEMENT_DATE
			,EXPIRATION_DATE
		)
		VALUES
		(
			#{noticeId}
			,#{articleId}
			,#{enforcementDate}
			,#{expirationDate}
		)
	</insert>
	
	<select id="getMyArticleList" parameterType="String" resultType="articleVo">
		SELECT /*+ INDEX(MEMBER_ID_IDX)*/
				* 
		FROM ARTICLE
		WHERE WRITE_MEMBER_ID = #{writeMemberId}
	</select>	
	
	<select id="isNoticeId" parameterType="String" resultType="String">
		SELECT  NVL(MIN('Y'), 'N')
		FROM 	DUAL
		WHERE	1			= 1
		AND		EXISTS
				(
						SELECT 
									1
						FROM		NOTICE_ARTICLE
						WHERE	
									ARTICLE_ID = #{articleId}
				)
	</select>
	
	<select id="chkMemberLevel" parameterType="memberVo" resultType="int">
		SELECT	member_level
		FROM	MEMBER
		WHERE
				MEMBER_ID 	 = #{memberId}
		AND		MEMBER_LEVEL = #{memberLevel}
	</select>
	
</mapper>
